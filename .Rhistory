replace = T,
title = paste0("Model for ", var_dict_finnegan[.x]),
file = here("06 Figures and tables", "Tables", "Finnegan", paste0("main_effect_", .x, ".tex"))
)
## save model using robust standard errors
etable(models_tab1[[paste0("robust_se_", .x)]],
dict = var_dict_finnegan,
tex = T,
replace = T,
title = paste0("Model for ", var_dict_finnegan[.x], " (robust SE)"),
file = here("06 Figures and tables", "Tables", "Finnegan", paste0("main_effect_", .x, "_robust_se.tex"))
)
})
map(dvs_v, ~{
formula <- as.formula(paste0(.x, " ~ ri + csw0(realgdpgr.x, fossfuel_prodpercap, ja20f_v2) | countryid + year"))
## save model in list
models_tab1[[.x]] <- feols(fml = formula, data = finnegan_merged, vcov = ~countryid)
models_tab1[[paste0("robust_se_", .x)]] <- feols(fml = formula, data = finnegan_merged, vcov = "hetero")
## save model using etable()
etable(models_tab1[[.x]],
dict = var_dict_finnegan,
tex = T,
replace = T,
title = paste0("Model for ", var_dict_finnegan[.x]),
file = here("06 Figures and tables", "Tables", "Finnegan", paste0("main_effect_", .x, ".tex"))
)
## save model using robust standard errors
etable(models_tab1[[paste0("robust_se_", .x)]],
dict = var_dict_finnegan,
tex = T,
replace = T,
title = paste0("Model for ", var_dict_finnegan[.x], " (robust SE)"),
file = here("06 Figures and tables", "Tables", "Finnegan", paste0("main_effect_", .x, "_robust_se.tex"))
)
})
finnegan_merged$realgdpgr.x
# Loop to run models and generate plots
models_list <- list()
plots_list <- list()
# Factorise some of the corporatism variables
finnegan_merged <- finnegan_merged %>%
mutate(bc = factor(bc),
tc = factor(tc))
for (var1 in corporatism) {
for (dv in dvs_v) {
for (var2 in variables) {
formula <- as.formula(paste0(dv, "~", var1, "*", var2, " + fossfuel_prodpercap + realgdpgr.x + unemp + elderly.x + ja20f_v2 | countryid + year"))
model_name <- paste(dv, var1, var2, sep = "__")
models_list[[model_name]] <- feols(fml = formula, data = finnegan_merged, lean = F)
## save regression table
table_path <- here("06 Figures and tables", "Tables", "Finnegan", paste0(model_name, ".tex"))
# formula_table <- as.formula(paste0(dv, "~", var1, "*", var2, " + csw0(fossfuel_prodpercap, realgdpgr.x + unemp, ja20f_v2) | countryid + year"))
formula_table <- as.formula(paste0(dv, "~", var1, " + csw0( ", var2, ",", var1, ":", var2, ", fossfuel_prodpercap, realgdpgr.x, unemp, elderly.x, ja20f_v2) | countryid + year"))
model_table <- feols(fml = formula_table, data = finnegan_merged)
etable(model_table,
tex = T,
dict = var_dict_finnegan,
replace = T,
title = paste("Examining", var_dict_finnegan[dv]),
file = table_path)
## me plot
plots_list[[model_name]] <- plot_slopes(models_list[[model_name]], rug = T,
variables = var1,
by = var2) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = paste("Marginal effect of", var_dict_finnegan[var1], "\non", var_dict_finnegan[dv], "by", var_dict_finnegan[var2]),
x = var_dict_finnegan[var2]) +
theme_bw()
print(plots_list[[model_name]])
ggsave(paste0(here(), "/06 Figures and tables/Figures/ME Finnegan/", model_name, ".png"),
width = 9, height = 6, unit = "in", dpi = 300)
}
}
}
for (var1 in corporatism) {
for (dv in dvs_v) {
for (var2 in variables) {
formula <- as.formula(paste0(dv, "~", var1, "*", var2, " + fossfuel_prodpercap + realgdpgr.x + unemp + elderly + ja20f_v2 | countryid + year"))
model_name <- paste(dv, var1, var2, sep = "__")
models_list[[model_name]] <- feols(fml = formula, data = finnegan_merged, lean = F)
## save regression table
table_path <- here("06 Figures and tables", "Tables", "Finnegan", paste0(model_name, ".tex"))
# formula_table <- as.formula(paste0(dv, "~", var1, "*", var2, " + csw0(fossfuel_prodpercap, realgdpgr.x + unemp, ja20f_v2) | countryid + year"))
formula_table <- as.formula(paste0(dv, "~", var1, " + csw0( ", var2, ",", var1, ":", var2, ", fossfuel_prodpercap, realgdpgr.x, unemp, elderly, ja20f_v2) | countryid + year"))
model_table <- feols(fml = formula_table, data = finnegan_merged)
etable(model_table,
tex = T,
dict = var_dict_finnegan,
replace = T,
title = paste("Examining", var_dict_finnegan[dv]),
file = table_path)
## me plot
plots_list[[model_name]] <- plot_slopes(models_list[[model_name]], rug = T,
variables = var1,
by = var2) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = paste("Marginal effect of", var_dict_finnegan[var1], "\non", var_dict_finnegan[dv], "by", var_dict_finnegan[var2]),
x = var_dict_finnegan[var2]) +
theme_bw()
print(plots_list[[model_name]])
ggsave(paste0(here(), "/06 Figures and tables/Figures/ME Finnegan/", model_name, ".png"),
width = 9, height = 6, unit = "in", dpi = 300)
}
}
}
################################
# Preliminaries
################################
# Load packages
library(tidyverse)  # includes dplyr, ggplot2, tidyr, readr, purrr, tibble, stringr, forcats
library(readxl)     # For reading Excel files
library(arrow)      # Efficient data reading and writing
library(janitor)    # For clean_names()
library(here)       # For constructing paths
library(fixest)     # For econometric models
library(kableExtra) # For enhanced table output
library(patchwork)  # For combining plots
library(modelsummary) # For model output
library(marginaleffects) # For marginal effects plots
library(haven)     # For reading Stata files
# Set up path
data_path <- here("03 Cleaned data", "Finnegan extended", "finnegan_merged.rds")
finnegan_merged <- readRDS(data_path)
finnegan_merged <- finnegan_merged %>% zap_labels()
## variable dictionary
var_dict_finnegan <- c("lambda_mean_wghtd" = "Overall stringency",
"lambda_mean_wghtd_con" = "Costs for consumers",
"lambda_mean_wghtd_prod" = "Costs for producers",
"lambda_mean_wghtd_comp" = "Consumer vs. producer costs",
"openc" = "Openness to trade",
"ind_valueadd" = "Industry value added",
"fossfuel_prodpercap" = "Fossil fuel production per capita",
"realgdpgr.x" = "Real GDP growth",
"realgdpgr" = "Real GDP growth",
"unemp" = "Unemployment rate",
"elect_comp" = "Electoral competitiveness",
"pr_ingov_mean_annual" = "Green party CIP",
"happy_with_env_preserv" = "Happiness with environmental preservation",
"unhappy_with_env_preserv" = "Unhappiness with environmental preservation",
"ja10f" = "Left-right dimension (Jahn)",
"ri" = "Concertation",
"trade_co2_share" = "Trade CO2 share",
"dis_gall.y" = "Gallgher's disproportionality index",
"elderly" = "Share of >65",
"corp_all" = "Corporatism (all)",
"corp_allsm" = "Corporatism (all, smoothed)",
"corp_core" = "Corporatism (core)",
"corp_cor_esm" = "Corporatism (core, smoothed)",
"corpo_f_cor_esm" = "Corporatism (ESM)",
"bc" = "Bipartite concertation",
"tc" = "Tripartite concertation",
"ud" = "Union density",
"nec_fs" = "number of employer confederations",
"nuc_fs" = "number of union confederations",
"ja20f_v2" = "Green vs. growth government preferences",
"carbon_inten1" = "Carbon intensity of energy supply",
"adj_cov_hist" = "Adjusted coverage (historical)",
"countryid" = "Country",
"year" = "Year")
# fixest table setup
setFixest_etable(postprocess.tex = NULL,
fitstat = ~ n + r2,
style.tex = style.tex("base",
line.top = "simple",
line.bottom = "simple",
fixef.title = "\\emph{Fixed effects}",
fixef.suffix = "",
stats.title = "\\midrule \\emph{Fit statistics}",
yesNo = "x"),
depvar = T,
family = T,
digits = "r3",
digits.stats = 3)
## fixest setup
setFixest_estimation(
data = NULL,
panel.id = NULL,
fixef.rm = "perfect",
fixef.tol = 1e-09,
fixef.iter = 10000,
collin.tol = 1e-12,
lean = TRUE,
verbose = 0,
warn = TRUE,
combine.quick = NULL,
demeaned = FALSE,
mem.clean = TRUE,
glm.iter = 25,
glm.tol = 1e-09,
reset = FALSE)
################################
# Helper function
################################
# Function to run models and handle errors
run_model <- function(formula, data, model_name) {
tryCatch({
model <- feols(fml = formula, data = data)
}, error = function(e) {
message("Error in model for ", model_name, ": ", e$message)
NULL
})
}
##########################################
# Analysis: Partial replication
#########################################
# Define variable names and models
variables <- c("openc", "ind_valueadd", "elect_comp", "carbon_inten1", "trade_co2_share", "pr_ingov_mean_annual", "ja10f")
dvs_v <- c("lambda_mean_wghtd", "lambda_mean_wghtd_con", "lambda_mean_wghtd_prod", "lambda_mean_wghtd_comp")
corporatism <- c("ri", "corp_all", "corp_allsm", "corp_core", "corp_cor_esm", "bc", "tc")
# models table 1
## create list of models for table 1
models_tab1 <- list()
map(dvs_v, ~{
formula <- as.formula(paste0(.x, " ~ ri + csw0(realgdpgr.x, fossfuel_prodpercap, ja20f_v2) | countryid + year"))
## save model in list
models_tab1[[.x]] <- feols(fml = formula, data = finnegan_merged, vcov = ~countryid)
models_tab1[[paste0("robust_se_", .x)]] <- feols(fml = formula, data = finnegan_merged, vcov = "hetero")
## save model using etable()
etable(models_tab1[[.x]],
dict = var_dict_finnegan,
tex = T,
replace = T,
title = paste0("Model for ", var_dict_finnegan[.x]),
file = here("06 Figures and tables", "Tables", "Finnegan", paste0("main_effect_", .x, ".tex"))
)
## save model using robust standard errors
etable(models_tab1[[paste0("robust_se_", .x)]],
dict = var_dict_finnegan,
tex = T,
replace = T,
title = paste0("Model for ", var_dict_finnegan[.x], " (robust SE)"),
file = here("06 Figures and tables", "Tables", "Finnegan", paste0("main_effect_", .x, "_robust_se.tex"))
)
})
##########################################
# Analysis: Extending Finnegan's Analysis
##########################################
# Factorise some of the corporatism variables
finnegan_merged <- finnegan_merged %>%
mutate(bc = factor(bc),
tc = factor(tc))
# Loop to run models and generate plots
models_list <- list()
plots_list <- list()
for (var1 in corporatism) {
for (dv in dvs_v) {
for (var2 in variables) {
formula <- as.formula(paste0(dv, "~", var1, "*", var2, " + fossfuel_prodpercap + realgdpgr.x + unemp + elderly + ja20f_v2 | countryid + year"))
model_name <- paste(dv, var1, var2, sep = "__")
models_list[[model_name]] <- feols(fml = formula, data = finnegan_merged, lean = F)
## save regression table
table_path <- here("06 Figures and tables", "Tables", "Finnegan", paste0(model_name, ".tex"))
# formula_table <- as.formula(paste0(dv, "~", var1, "*", var2, " + csw0(fossfuel_prodpercap, realgdpgr.x + unemp, ja20f_v2) | countryid + year"))
formula_table <- as.formula(paste0(dv, "~", var1, " + csw0( ", var2, ",", var1, ":", var2, ", fossfuel_prodpercap, realgdpgr.x, unemp, elderly, ja20f_v2) | countryid + year"))
model_table <- feols(fml = formula_table, data = finnegan_merged)
etable(model_table,
tex = T,
dict = var_dict_finnegan,
replace = T,
title = paste("Examining", var_dict_finnegan[dv]),
file = table_path)
## me plot
plots_list[[model_name]] <- plot_slopes(models_list[[model_name]], rug = T,
variables = var1,
by = var2) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = paste("Marginal effect of", var_dict_finnegan[var1], "\non", var_dict_finnegan[dv], "by", var_dict_finnegan[var2]),
x = var_dict_finnegan[var2]) +
theme_bw()
print(plots_list[[model_name]])
ggsave(paste0(here(), "/06 Figures and tables/Figures/ME Finnegan/", model_name, ".png"),
width = 9, height = 6, unit = "in", dpi = 300)
}
}
}
# Output models and plots
lapply(models_list, summary)
lapply(plots_list, print)
################################
# Preliminaries
################################
# load packages
library(tidyverse)  # includes dplyr, ggplot2, tidyr, readr, purrr, tibble, stringr, forcats
library(readxl)     # For reading Excel files
library(data.table) # For fast data manipulation
library(countrycode) # For converting country names to codes
library(tidylog)    # For enhanced error messages
library(arrow)      # Efficient data reading and writing
library(janitor)    # For clean_names()
library(here)       # For constructing paths
library(fixest)     # For fast fixed effects estimations models
library(fwlplot)    # For fixest plots
library(modelsummary) # For model output
library(marginaleffects) # For marginal effects plots
library(kableExtra) # For enhanced table output
library(scales)    # For formatting axes
library(patchwork) # For combining plots
library(haven)     # For reading Stata files
# import data
import_data <- function(file_path) {
# Calculate the intended data name based on file name, stripping extension and special characters
data_name <- gsub("[^[:alnum:]_]", "", tools::file_path_sans_ext(basename(file_path)))
# Check if the dataset already exists in the global environment
if (exists(data_name, envir = .GlobalEnv)) {
message("Dataset '", data_name, "' already loaded.")
return(get(data_name, envir = .GlobalEnv))
}
# Proceed with loading if the dataset does not exist
tryCatch({
ext <- tools::file_ext(file_path)
data <- switch(ext,
csv = read_csv_arrow(file_path) %>% clean_names(),
xlsx = read_xlsx(file_path) %>% clean_names() %>% remove_empty(which = c("cols", "rows")),
rds = readRDS(file_path) %>% clean_names(),
dta = read_dta(file_path) %>% clean_names(),
parquet = read_parquet(file_path) %>% clean_names(),
stop("Unsupported file type")
)
# Assign data frame to the global environment
assign(data_name, data, envir = .GlobalEnv)
return(data)
}, error = function(e) {
message("Failed to load ", file_path, ": ", e$message)
NULL  # Return NULL on error
})
}
## specify folder of interest and apply function to all files in folder
data_folder <- list.files(file.path(here(), "/03 Cleaned data/OECD CAPMF/"), full.names = TRUE)
map(list.files(data_folder, full.names = T), ~import_data(.x))
# fixest table setup
setFixest_etable(postprocess.tex = NULL,
fitstat = ~ n + r2,
style.tex = style.tex("base",
line.top = "simple",
line.bottom = "simple",
fixef.title = "\\emph{Fixed effects}",
fixef.suffix = "",
stats.title = "\\midrule \\emph{Fit statistics}",
yesNo = "x"),
depvar = T,
family = T,
digits = "r3",
digits.stats = 3)
## fixest setup
setFixest_estimation(
data = NULL,
panel.id = NULL,
fixef.rm = "perfect",
fixef.tol = 1e-09,
fixef.iter = 10000,
collin.tol = 1e-12,
lean = TRUE,
verbose = 0,
warn = TRUE,
combine.quick = NULL,
demeaned = FALSE,
mem.clean = TRUE,
glm.iter = 25,
glm.tol = 1e-09,
reset = FALSE)
## variable dictionary, with var name the key and the value the description
var_dict <- c(
"obs_value" = "Stringency value",
"obs_value1" = "Stringency value modified",
"obs_value1_lag1" = "Stringency value modified, one-year lag",
"obs_value1_lag2" = "Stringency value modified, two-year lag",
"obs_value1_lag3" = "Stringency value modified, three-year lag",
"obs_value1_lag4" = "Stringency value modified, four-year lag",
"sector" = "Sector",
"instrument_type" = "Instrument type",
"democracy" = "BMR democracy dummy",
"polityfrompolity" = "Polity score",
"polconiii" = "Political constraints index III",
"polconiii_vdem" = "Political constraints index III (VDEM)",
"polconv" = "Political constraints index V",
"polconv_vdem" = "Political constraints index V (VDEM)",
"corp_all" = "Corporatism (all)",
"corp_allsm" = "Corporatism (all), sm",
"corp_core" = "Corporatism (core)",
"corp_cor_esm" = "Corporatism (core), sm",
"corpo_f_cor_esm" = "Corporatism (core), sm f",
"concert" = "Concertation indicator",
"bc" = "Bipartite concertation",
"tc" = "Tripartite concertation",
"tc_bc_dummy" = "Concertation dummy (TC or BC)",
"ud_ipol" = "Union density (interpolated)",
"ud_s" = "Union density (survey data)",
"ud_hist" = "Union density (historical data)",
"ud_female" = "Union density (female)",
"ud_s_female" = "Union density, female (survey data)",
"ud_male" = "Union density (Male)",
"ud_s_male" = "Union density, male (survey data)",
"ud_private" = "Union density (private sector)",
"ud_s_private" = "Union density, private sector (survey data)",
"ud_public" = "Union density (public sector)",
"ud_s_public" = "Union density, public sector (survey data)",
"ud_s_parttime" = "Union density (part-time workers)",
"ud_s_fulltime" = "Union density (full-time workers)",
"ud_s_temp" = "Union density (temporary workers)",
"ud_s_perm" = "Union density (permanent workers)",
"new_cov" = "Bargaining coverage of newly concluded agreements",
"unadj_cov" = "Unadjusted bargaining coverage",
"unadj_cov_s" = "Unadjusted bargaining coverage (survey data)",
"adj_cov" = "Adjusted bargaining coverage",
"adj_cov_s" = "Adjusted bargaining coverage (survey data)",
"adj_cov_hist" = "Adjusted bargaining coverage (historical data)",
"cov_priv" = "Bargaining coverage of private sector",
"cov_priv_s" = "Bargaining coverage of private sector (survey data)",
"cov_pub" = "Bargaining coverage of public sector",
"cov_pub_s" = "Bargaining coverage of public sector (survey data)",
"nec_fs" = "Number of employer confederations",
"nuc_fs" = "Number of union confederations",
"netu_ipol" = "Net union density (interpolated)",
"ag_lnd_totl_k2" = "Land area (sq. km)",
"bg_gsr_nfsv_gd_zs" = "Trade in services (% of GDP)",
"en_atm_co2e_pc" = "CO2 emissions p.c. (metric tonnes)",
"gc_tax_intt_rv_zs" = "Tax on int'l trade (% of revenue)",
"gc_tax_totl_gd_zs" = "Tax revenue (% of GDP)",
"ne_trd_gnfs_zs" = "Trade (% of GDP)",
"nv_ind_manf_zs" = "Manufacturing value added (% of GDP)",
"nv_ind_totl_kd" = "Industry value added (constant 2015 USD)",
"nv_ind_totl_zs" = "Industry value added (% of GDP)",
"ny_gdp_coal_rt_zs" = "Coal rents (% of GDP)",
"ny_gdp_frst_rt_zs" = "Forest rents (% of GDP)",
"ny_gdp_minr_rt_zs" = "Mineral rents (% of GDP)",
"ny_gdp_ngas_rt_zs" = "Natural gas rents (% of GDP)",
"ny_gdp_petr_rt_zs" = "Oil rents (% of GDP)",
"ny_gdp_pcap_cd" = "GDP p.c. (current USD)",
"ny_gdp_pcap_kd" = "GDP p.c. (constant 2015 USD)",
"ny_gdp_pcap_kd_zg" = "GDP p.c. growth (% annual)",
"ny_ttf_gnfs_kn" = "Terms of trade adjustment (constant LCU)",
"sp_pop_totl" = "Population total",
"population_x" = "Population",
"fossil_share_elec" = "Fossil share electricity",
"fossil_elec_per_capita" = "Fossil electricity p.c.",
"fossil_share_energy" = "Fossil share energy",
"fossil_energy_per_capita" = "Fossil share energy p.c.",
"co2_per_gdp" = "CO2 emissions per GDP",
"co2_including_luc_per_gdp" = "CO2 emissions including land use change per GDP",
"consumption_co2_per_gdp" = "Consumption CO2 per GDP",
"cement_co2_per_capita" = "Cement CO2 p.c.",
"co2_including_luc_per_capita" = "CO2 emissions including land use change p.c.",
"co2_per_capita" = "CO2 emissions p.c.",
"coal_co2_per_capita" = "Coal CO2 p.c.",
"consumption_co2_per_capita" = "Consumption CO2 p.c.",
"flaring_co2_per_capita" = "Flaring CO2 p.c.",
"gas_co2_per_capita" = "Gas CO2 p.c.",
"land_use_change_co2_per_capita" = "Land use change CO2 p.c.",
"oil_co2_per_capita" = "Oil CO2 p.c.",
"other_co2_per_capita" = "Other CO2 p.c.",
"share_global_cement_co2" = "Share of global cement CO2",
"share_global_co2" = "Share of global CO2",
"share_global_co2_including_luc" = "Share of global CO2 including land use change",
"share_global_coal_co2" = "Share of global coal CO2",
"share_global_cumulative_cement_co2" = "Share of global cumulative cement CO2",
"share_global_cumulative_co2" = "Share of global cumulative CO2",
"share_global_cumulative_co2_including_luc" = "Share of global cumulative CO2 including land use change",
"share_global_cumulative_coal_co2" = "Share of global cumulative coal CO2",
"share_global_cumulative_gas_co2" = "Share of global cumulative gas CO2",
"share_global_cumulative_oil_co2" = "Share of global cumulative oil CO2",
"share_global_gas_co2" = "Share of global gas CO2",
"share_global_oil_co2" = "Share of global oil CO2",
"share_global_other_co2" = "Share of global other CO2",
"trade_co2_share" = "Trade CO2 share",
"coal_share_elec" = "Coal share electricity",
"coal_cons_per_capita" = "Coal consumption p.c.",
"coal_elec_per_capita" = "Coal electricity p.c.",
"coal_prod_per_capita" = "Coal production p.c.",
"coal_share_energy" = "Coal share energy",
"eco_cip_gross" = "Green party CIP (Gross)",
"eco_cip_net" = "Green party CIP (Net)",
"pr_ingov_mean_annual" = "Green party CIP",
"elec_diff_abs" = "Absolute avg poll error",
"elec_diff_abs_top2" = "Absolute avg poll error top 2 parties",
"elec_diff_abs_top3" = "Absolute avg poll error top 3 parties",
"elec_diff_abs_last2" = "Absolute avg poll error last 2 polls",
"elec_diff_abs_last3" = "Absolute avg poll error last 3 polls",
"elec_diff_abs_last10d" = "Absolute avg poll error last 10 days",
"elec_diff_abs_last15d" = "Absolute avg poll error last 15 days",
"elec_diff_populist" = "Absolute avg populist shock",
"elec_diff_state" = "Absolute avg pro-state shock",
"elec_diff_market" = "Absolute avg pro-market shock",
"elec_diff_lib" = "Absolute avg pro-liberal shock",
"elec_diff_auth" = "Absolute avg pro-authoritarian shock",
"elec_diff_aeu" = "Absolute avg anti-EU shock",
"elec_diff_proeu" = "Absolute avg pro-EU shock",
"elec_diff_incumbent" = "Mean elec incumbent",
"elec_diff_winner" = "Mean elec winner",
"incumbent" = "Incumbent party stays on (dummy)",
"reshuffle_shock" = "Reshuffle shock",
"lpr" = "Loss probability",
"lprsq" = "Loss probability squared",
"openc" = "Openness of economy",
"nomgdpgr" = "Nominal GDP growth",
"realgdpgr" = "Real GDP growth",
"eu" = "EU membership",
"elderly" = "Share of population >65",
"rae_ele" = "Rae electoral fractionalisation",
"rae_leg" = "Rae legislative fractionalisation",
"dis_abso" = "Index of absolute disproportionality",
"dis_rel" = "Index of relative disproportionality",
"dis_gall" = "Gallagher index of disproportionality",
"training_pmp" = "Labour market training as % of GDP",
"happy_with_env_preserv" = "Happiness with environmental preservation",
"unhappy_with_env_preserv" = "Unhappy with environmental preservation",
"environ_worry_interpolated" = "Environmental worry (interpolated)",
"half_decade" = "Half decade",
"clim_act_pol" = "Type of climate action/measure",
"iso3c" = "Country",
"time_period" = "Year"
)
oecd_adoption_LEV1$elec_diff_lib
