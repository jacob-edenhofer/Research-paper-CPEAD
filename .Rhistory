variables = interaction_var,
by = by_var,
rug = TRUE) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = paste("Marginal Effect of", interaction_var, "on", dv, "by", by_var),
x = by_var) +
theme_minimal()
plot
}, error = function(e) {
message("Failed to generate plot for model: ", e$message)
NULL
})
} else {
message("Model is NULL")
NULL
}
}
# Define variable names and models
variables <- c("openc.x", "ind_valueadd", "elect_comp")
dvs_v <- c("lambda_mean_wghtd", "lambda_mean_wghtd_con", "lambda_mean_wghtd_prod", "lambda_mean_wghtd_comp")
corporatism <- c("ri", "corp_all", "corp_allsm", "corp_core", "corp_cor_esm", "corpo_f_cor_esm")
# Loop to run models and generate plots
models_list <- list()
plots_list <- list()
# Generate me plots
plots_list <- list()
for (model_name in names(models_list)) {
parts <- str_split(model_name, "_", simplify = TRUE)
dv <- parts[1]
var1 <- parts[2]
var2 <- parts[3]
print(c(dv, var1, var2))
# if (!is.null(models_list[[model_name]])) {
#   plots_list[[model_name]] <- generate_me_plot(models_list[[model_name]],
#                                                interaction_var = var1,
#                                                var = var2,
#                                                dv = dv)
# }
}
################################
# Preliminaries
################################
# Load packages
library(tidyverse)  # includes dplyr, ggplot2, tidyr, readr, purrr, tibble, stringr, forcats
library(readxl)
library(arrow)      # Efficient data reading and writing
library(janitor)    # For clean_names()
library(here)       # For constructing paths
library(fixest)     # For econometric models
library(kableExtra) # For enhanced table output
library(patchwork)  # For combining plots
library(modelsummary) # For model output
library(marginaleffects) # For marginal effects plots
# Set up path
data_path <- here("03 Cleaned data", "Finnegan extended", "finnegan_merged.rds")
finnegan_merged <- readRDS(data_path)
################################
# Helper Functions
################################
# Function to run models and handle errors
run_model <- function(formula, data, model_name) {
tryCatch({
model <- feols(fml = formula, data = data)
}, error = function(e) {
message("Error in model for ", model_name, ": ", e$message)
NULL
})
}
# Function to generate marginal effects plots
# generate_me_plot <- function(model, interaction_var, var, dv) {
#   if (!is.null(model)) {
#     plot_slopes(model, variables = interaction_var, by = var, rug = T) +
#       geom_hline(yintercept = 0, linetype = "dashed") +
#       labs(title = paste("Marginal Effect of", interaction_var, "on", dv, "by", var),
#            x = var) +
#       theme_minimal()
#   } else {
#     message("Model is NULL")
#   }
# }
generate_me_plot <- function(model, interaction_var, by_var, dv) {
if (!is.null(model)) {
tryCatch({
plot <- plot_slopes(model,
variables = interaction_var,
by = by_var,
rug = TRUE) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = paste("Marginal Effect of", interaction_var, "on", dv, "by", by_var),
x = by_var) +
theme_minimal()
plot
}, error = function(e) {
message("Failed to generate plot for model: ", e$message)
NULL
})
} else {
message("Model is NULL")
NULL
}
}
################################
# Analysis: Extending Finnegan's Analysis
################################
# Define variable names and models
variables <- c("openc.x", "ind_valueadd", "elect_comp")
dvs_v <- c("lambda_mean_wghtd", "lambda_mean_wghtd_con", "lambda_mean_wghtd_prod", "lambda_mean_wghtd_comp")
corporatism <- c("ri", "corp_all", "corp_allsm", "corp_core", "corp_cor_esm", "corpo_f_cor_esm")
# Loop to run models and generate plots
models_list <- list()
for (var1 in corporatism) {
for (dv in dvs_v) {
for (var2 in variables) {
formula <- as.formula(paste0(dv, "~", var1, "*", var2, " + fossfuel_prodpercap + realgdpgr.x + unemp + ja20f_v2 | countryid + year"))
model_name <- paste(dv, var1, var2, sep = "|")
models_list[[model_name]] <- run_model(formula, data = finnegan_merged, model_name)
}
}
}
# Output models and plots
lapply(models_list, print)
# lapply(plots_list, print)
# Generate me plots
plots_list <- list()
for (model_name in names(models_list)) {
parts <- str_split(model_name, "|", simplify = TRUE)
dv <- parts[1]
var1 <- parts[2]
var2 <- parts[3]
print(c(dv, var1, var2))
if (!is.null(models_list[[model_name]])) {
plots_list[[model_name]] <- generate_me_plot(models_list[[model_name]],
interaction_var = var1,
var = var2,
dv = dv)
}
}
for (var1 in corporatism) {
for (dv in dvs_v) {
for (var2 in variables) {
formula <- as.formula(paste0(dv, "~", var1, "*", var2, " + fossfuel_prodpercap + realgdpgr.x + unemp + ja20f_v2 | countryid + year"))
model_name <- paste(dv, var1, var2, sep = "-")
models_list[[model_name]] <- run_model(formula, data = finnegan_merged, model_name)
}
}
}
# Loop to run models and generate plots
models_list <- list()
for (var1 in corporatism) {
for (dv in dvs_v) {
for (var2 in variables) {
formula <- as.formula(paste0(dv, "~", var1, "*", var2, " + fossfuel_prodpercap + realgdpgr.x + unemp + ja20f_v2 | countryid + year"))
model_name <- paste(dv, var1, var2, sep = "-")
models_list[[model_name]] <- run_model(formula, data = finnegan_merged, model_name)
}
}
}
for (model_name in names(models_list)) {
parts <- str_split(model_name, "-", simplify = TRUE)
dv <- parts[1]
var1 <- parts[2]
var2 <- parts[3]
print(c(dv, var1, var2))
if (!is.null(models_list[[model_name]])) {
plots_list[[model_name]] <- generate_me_plot(models_list[[model_name]],
interaction_var = var1,
var = var2,
dv = dv)
}
}
for (model_name in names(models_list)) {
parts <- str_split(model_name, "-", simplify = TRUE)
dv <- parts[1]
var1 <- parts[2]
var2 <- parts[3]
print(c(dv, var1, var2))
if (!is.null(models_list[[model_name]])) {
plots_list[[model_name]] <- generate_me_plot(models_list[[model_name]],
interaction_var = var1,
by_var = var2,
dv = dv)
}
}
for (model_name in names(models_list)) {
parts <- str_split(model_name, "-", simplify = TRUE)
dv <- parts[1]
var1 <- parts[2]
var2 <- parts[3]
print(c(dv, var1, var2))
if (!is.null(models_list[[model_name]])) {
plots_list[[model_name]] <- generate_me_plot(models_list[[model_name]]$coeftable,
interaction_var = var1,
by_var = var2,
dv = dv)
}
}
################################
# Preliminaries
################################
# Load packages
library(tidyverse)  # includes dplyr, ggplot2, tidyr, readr, purrr, tibble, stringr, forcats
library(readxl)
library(arrow)      # Efficient data reading and writing
library(janitor)    # For clean_names()
library(here)       # For constructing paths
library(fixest)     # For econometric models
library(kableExtra) # For enhanced table output
library(patchwork)  # For combining plots
library(modelsummary) # For model output
library(marginaleffects) # For marginal effects plots
# Set up path
data_path <- here("03 Cleaned data", "Finnegan extended", "finnegan_merged.rds")
finnegan_merged <- readRDS(data_path)
################################
# Helper Functions
################################
# Function to run models and handle errors
run_model <- function(formula, data, model_name) {
tryCatch({
model <- feols(fml = formula, data = data)
}, error = function(e) {
message("Error in model for ", model_name, ": ", e$message)
NULL
})
}
# Function to generate marginal effects plots
# generate_me_plot <- function(model, interaction_var, var, dv) {
#   if (!is.null(model)) {
#     plot_slopes(model, variables = interaction_var, by = var, rug = T) +
#       geom_hline(yintercept = 0, linetype = "dashed") +
#       labs(title = paste("Marginal Effect of", interaction_var, "on", dv, "by", var),
#            x = var) +
#       theme_minimal()
#   } else {
#     message("Model is NULL")
#   }
# }
generate_me_plot <- function(model, interaction_var, by_var, dv) {
if (!is.null(model)) {
tryCatch({
plot <- plot_slopes(model,
variables = interaction_var,
by = by_var,
rug = TRUE) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = paste("Marginal Effect of", interaction_var, "on", dv, "by", by_var),
x = by_var) +
theme_minimal()
plot
}, error = function(e) {
message("Failed to generate plot for model: ", e$message)
NULL
})
} else {
message("Model is NULL")
NULL
}
}
################################
# Analysis: Extending Finnegan's Analysis
################################
# Define variable names and models
variables <- c("openc.x", "ind_valueadd", "elect_comp")
dvs_v <- c("lambda_mean_wghtd", "lambda_mean_wghtd_con", "lambda_mean_wghtd_prod", "lambda_mean_wghtd_comp")
corporatism <- c("ri", "corp_all", "corp_allsm", "corp_core", "corp_cor_esm", "corpo_f_cor_esm")
# Loop to run models and generate plots
models_list <- list()
for (var1 in corporatism) {
for (dv in dvs_v) {
for (var2 in variables) {
formula <- as.formula(paste0(dv, "~", var1, "*", var2, " + fossfuel_prodpercap + realgdpgr.x + unemp + ja20f_v2 | countryid + year"))
model_name <- paste(dv, var1, var2, sep = "-")
models_list[[model_name]] <- run_model(formula, data = finnegan_merged, model_name)
}
}
}
# Output models and plots
lapply(models_list, print)
# Generate me plots
plots_list <- list()
for (model_name in names(models_list)) {
parts <- str_split(model_name, "-", simplify = TRUE)
dv <- parts[1]
var1 <- parts[2]
var2 <- parts[3]
print(c(dv, var1, var2))
if (!is.null(models_list[[model_name]])) {
plots_list[[model_name]] <- generate_me_plot(models_list[[model_name]],
interaction_var = var1,
by_var = var2,
dv = dv)
}
}
# # Combine plots (example with two specific models)
# plot_output <- wrap_plots(plots_list[["Model_openc_lambda_mean_wghtd"]],
#                           plots_list[["Model_openc_lambda_mean_wghtd_con"]], nrow = 2)
# print(plot_output)
################################
# Preliminaries
################################
# Load packages
library(tidyverse)  # includes dplyr, ggplot2, tidyr, readr, purrr, tibble, stringr, forcats
library(readxl)
library(arrow)      # Efficient data reading and writing
library(janitor)    # For clean_names()
library(here)       # For constructing paths
library(fixest)     # For econometric models
library(kableExtra) # For enhanced table output
library(patchwork)  # For combining plots
library(modelsummary) # For model output
library(marginaleffects) # For marginal effects plots
# Set up path
data_path <- here("03 Cleaned data", "Finnegan extended", "finnegan_merged.rds")
finnegan_merged <- readRDS(data_path)
################################
# Helper Functions
################################
# Function to run models and handle errors
run_model <- function(formula, data, model_name) {
tryCatch({
model <- feols(fml = formula, data = data)
}, error = function(e) {
message("Error in model for ", model_name, ": ", e$message)
NULL
})
}
# Function to generate marginal effects plots
# generate_me_plot <- function(model, interaction_var, var, dv) {
#   if (!is.null(model)) {
#     plot_slopes(model, variables = interaction_var, by = var, rug = T) +
#       geom_hline(yintercept = 0, linetype = "dashed") +
#       labs(title = paste("Marginal Effect of", interaction_var, "on", dv, "by", var),
#            x = var) +
#       theme_minimal()
#   } else {
#     message("Model is NULL")
#   }
# }
generate_me_plot <- function(model, interaction_var, by_var, dv) {
if (!is.null(model)) {
tryCatch({
plot <- plot_slopes(model,
variables = interaction_var,
by = by_var,
rug = TRUE) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = paste("Marginal Effect of", interaction_var, "on", dv, "by", by_var),
x = by_var) +
theme_minimal()
plot
}, error = function(e) {
message("Failed to generate plot for model: ", e$message)
NULL
})
} else {
message("Model is NULL")
NULL
}
}
################################
# Analysis: Extending Finnegan's Analysis
################################
# Define variable names and models
variables <- c("openc.x", "ind_valueadd", "elect_comp")
dvs_v <- c("lambda_mean_wghtd", "lambda_mean_wghtd_con", "lambda_mean_wghtd_prod", "lambda_mean_wghtd_comp")
corporatism <- c("ri", "corp_all", "corp_allsm", "corp_core", "corp_cor_esm", "corpo_f_cor_esm")
# Loop to run models and generate plots
models_list <- list()
for (var1 in corporatism) {
for (dv in dvs_v) {
for (var2 in variables) {
formula <- as.formula(paste0(dv, "~", var1, "*", var2, " + fossfuel_prodpercap + realgdpgr.x + unemp + ja20f_v2 | countryid + year"))
model_name <- paste(dv, var1, var2, sep = "|")
models_list[[model_name]] <- run_model(formula, data = finnegan_merged, model_name)
}
}
}
# Output models and plots
lapply(models_list, print)
# Generate me plots
plots_list <- list()
for (model_name in names(models_list)) {
parts <- str_split(model_name, "|", simplify = TRUE)
dv <- parts[1]
var1 <- parts[2]
var2 <- parts[3]
print(c(dv, var1, var2))
if (!is.null(models_list[[model_name]])) {
plots_list[[model_name]] <- generate_me_plot(models_list[[model_name]],
interaction_var = var1,
by_var = var2,
dv = dv)
}
}
# # Combine plots (example with two specific models)
# plot_output <- wrap_plots(plots_list[["Model_openc_lambda_mean_wghtd"]],
#                           plots_list[["Model_openc_lambda_mean_wghtd_con"]], nrow = 2)
# print(plot_output)
################################
# Preliminaries
################################
# Load packages
library(tidyverse)  # includes dplyr, ggplot2, tidyr, readr, purrr, tibble, stringr, forcats
library(readxl)
library(arrow)      # Efficient data reading and writing
library(janitor)    # For clean_names()
library(here)       # For constructing paths
library(fixest)     # For econometric models
library(kableExtra) # For enhanced table output
library(patchwork)  # For combining plots
library(modelsummary) # For model output
library(marginaleffects) # For marginal effects plots
# Set up path
data_path <- here("03 Cleaned data", "Finnegan extended", "finnegan_merged.rds")
finnegan_merged <- readRDS(data_path)
################################
# Helper Functions
################################
# Function to run models and handle errors
run_model <- function(formula, data, model_name) {
tryCatch({
model <- feols(fml = formula, data = data)
}, error = function(e) {
message("Error in model for ", model_name, ": ", e$message)
NULL
})
}
# Function to generate marginal effects plots
# generate_me_plot <- function(model, interaction_var, var, dv) {
#   if (!is.null(model)) {
#     plot_slopes(model, variables = interaction_var, by = var, rug = T) +
#       geom_hline(yintercept = 0, linetype = "dashed") +
#       labs(title = paste("Marginal Effect of", interaction_var, "on", dv, "by", var),
#            x = var) +
#       theme_minimal()
#   } else {
#     message("Model is NULL")
#   }
# }
generate_me_plot <- function(model, interaction_var, by_var, dv) {
if (!is.null(model)) {
tryCatch({
plot <- plot_slopes(model,
variables = interaction_var,
by = by_var,
rug = TRUE) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = paste("Marginal Effect of", interaction_var, "on", dv, "by", by_var),
x = by_var) +
theme_minimal()
plot
}, error = function(e) {
message("Failed to generate plot for model: ", e$message)
NULL
})
} else {
message("Model is NULL")
NULL
}
}
################################
# Analysis: Extending Finnegan's Analysis
################################
# Define variable names and models
variables <- c("openc.x", "ind_valueadd", "elect_comp")
dvs_v <- c("lambda_mean_wghtd", "lambda_mean_wghtd_con", "lambda_mean_wghtd_prod", "lambda_mean_wghtd_comp")
corporatism <- c("ri", "corp_all", "corp_allsm", "corp_core", "corp_cor_esm", "corpo_f_cor_esm")
# Loop to run models and generate plots
models_list <- list()
for (var1 in corporatism) {
for (dv in dvs_v) {
for (var2 in variables) {
formula <- as.formula(paste0(dv, "~", var1, "*", var2, " + fossfuel_prodpercap + realgdpgr.x + unemp + ja20f_v2 | countryid + year"))
model_name <- paste(dv, var1, var2, sep = "/")
models_list[[model_name]] <- run_model(formula, data = finnegan_merged, model_name)
}
}
}
# Output models and plots
lapply(models_list, print)
# Generate me plots
plots_list <- list()
for (model_name in names(models_list)) {
parts <- str_split(model_name, "/", simplify = TRUE)
dv <- parts[1]
var1 <- parts[2]
var2 <- parts[3]
print(c(dv, var1, var2))
if (!is.null(models_list[[model_name]])) {
plots_list[[model_name]] <- generate_me_plot(models_list[[model_name]],
interaction_var = var1,
by_var = var2,
dv = dv)
}
}
# # Combine plots (example with two specific models)
# plot_output <- wrap_plots(plots_list[["Model_openc_lambda_mean_wghtd"]],
#                           plots_list[["Model_openc_lambda_mean_wghtd_con"]], nrow = 2)
# print(plot_output)
View(models_list)
models_list[["lambda_mean_wghtd/ri/openc.x"]]
models_list[["lambda_mean_wghtd/ri/ind_valueadd"]]
models_list[["lambda_mean_wghtd/ri/elect_comp"]]
models_list[["lambda_mean_wghtd_con/ri/openc.x"]]
models_list[["lambda_mean_wghtd_con/ri/ind_valueadd"]]
models_list[["lambda_mean_wghtd_con/ri/elect_comp"]]
models_list[["lambda_mean_wghtd_prod/ri/openc.x"]]
models_list[["lambda_mean_wghtd_prod/ri/ind_valueadd"]]
models_list[["lambda_mean_wghtd_prod/ri/elect_comp"]]
models_list[["lambda_mean_wghtd_comp/ri/openc.x"]]
models_list[["lambda_mean_wghtd_comp/ri/ind_valueadd"]]
models_list[["lambda_mean_wghtd_comp/ri/elect_comp"]]
