# Debug: Print the formula to ensure it is constructed correctly
print(interaction_term_dict)
print(formula)
# # Perform jackknife estimation
coef_jack <- list()
# for (country in unique(dataset$iso3c)) {
#   data_jacknife <- dataset %>% filter(iso3c != country)
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "country"
#
#   coef_jack[[country]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   print(coef_jack[[country]])
# }
#
# jacknife estimatation for year
# for (year in unique(dataset$time_period)) {
#   data_jacknife <- dataset %>% filter(time_period != year)
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "year"
#
#   coef_jack[[year]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   print(coef_jack[[year]])
# }
## do this for half-decade
for (hc in unique(dataset$half_decade)) {
data_jacknife <- dataset %>% filter(time_period != hc)
model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
## extract coefficients
coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
coefs$coefficient <- dimnames(coeftable(model))[[1]]
coefs$type <- "half_decade"
coef_jack[[hc]] <- coefs %>%
filter(coefficient == interaction_term_dict)
# Debug: Print coefficients for each country to check results
# print(coef_jack[[hc]])
}
## jacknife estimate for observations (takes too long)
# for(row_no in 1:nrow(dataset)) {
#   data_jacknife <- dataset[-row_no,]
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "observation"
#
#   coef_jack[[row_no]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   print(coef_jack[[row_no]])
# }
## bind together the results
coef_jack <- bind_rows(coef_jack)
# print(coef_jack)
## plot histograms (by type variable)
print(coef_jack %>%
ggplot(aes(x = estimate)) +
geom_histogram(aes(y = after_stat(density)),
alpha = 0.8,
colour = "white") +
geom_density(linewidth = 0.8) +
geom_vline(xintercept = 0, linetype = "dashed", color = "red",
linewidth = 1) +
geom_vline(aes(xintercept = mean(estimate)), linetype = "dashed",
color = "darkblue", linewidth = 1) +
expand_limits(x = 0) +
# facet_wrap(~type) +
# labelling doesn't work (need to modify dictionary in loop above)
labs(title = paste0("Jacknife estimates for ", var_dict[interaction_term_dict]),
x = "Estimate",
y = "Density") +
theme_bw())
## save plots
ggsave(paste0(here(), "06 Figures and Tables/Jacknife/", var_dict[interaction_term_dict], ".png"),
plot = last_plot(),
width = 9, height = 6, dpi = 300)
}
}
return(models_list)
}
jacknife_function(dataset = oecd_adoption_LEV1,
data_type = "adoption_LEV1",
var_dict = var_dict,
corporatism = corporatism,
variables = variables,
covariates = covariates)
jacknife_function <- function(dataset, data_type, var_dict, corporatism, variables, covariates) {
# Check for necessary columns and types
necessary_columns <- c("iso3c", "clim_act_pol", "time_period")
if (!all(necessary_columns %in% names(dataset))) {
stop("Dataset must contain the necessary columns: iso3c, clim_act_pol, and time_period.")
}
# Data modification based on 'data_type'
if (grepl("adoption", data_type)) {
dataset <- dataset %>%
mutate(obs_value1 = ifelse(obs_value1 > 0, 1, 0))
}
# Create lagged variables for specified columns
all_vars <- unique(c(corporatism, variables, covariates))
dataset <- dataset %>%
group_by(iso3c, clim_act_pol) %>%
mutate(across(
.cols = all_vars,
.fns = ~dplyr::lag(.x, 1, order_by = time_period),
.names = "{.col}_lag1"
)) %>%
ungroup()
# Update var_dict with new lagged variables
# Update var_dict with new lagged variables
for (col in all_vars) {
new_var_name <- paste0(col, "_lag1")
var_dict[new_var_name] <- paste0(var_dict[col], ", 1-year lag")
}
# Prepare the list to store models
models_list <- list()
# Iterate through each pair of corporatism and variables
for(j in corporatism) {
for(i in variables) {
# Create interaction term and update dictionary
interaction_term <- paste(paste0(j, "_lag1"), paste0(i, "_lag1"), sep = "*")
interaction_term_dict <- paste(paste0(j, "_lag1"), paste0(i, "_lag1"), sep = ":")
var_dict[interaction_term_dict] <- paste0(var_dict[paste0(j, "_lag1")], " x ", var_dict[paste0(i, "_lag1")])
# Formula construction
if (grepl("LEV2", data_type)) {
formula <- as.formula(paste("obs_value1 ~", interaction_term, "+", paste(paste0(covariates, "_lag1"), collapse = " + "), "| iso3c + half_decade + instrument_type"))
} else {
formula <- as.formula(paste("obs_value1 ~", interaction_term, "+", paste(paste0(covariates, "_lag1"), collapse = " + "), "| iso3c + half_decade + clim_act_pol"))
}
# Debug: Print the formula to ensure it is constructed correctly
print(interaction_term_dict)
print(formula)
# # Perform jackknife estimation
coef_jack <- list()
# for (country in unique(dataset$iso3c)) {
#   data_jacknife <- dataset %>% filter(iso3c != country)
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "country"
#
#   coef_jack[[country]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   print(coef_jack[[country]])
# }
#
# jacknife estimatation for year
for (year in unique(dataset$time_period)) {
data_jacknife <- dataset %>% filter(time_period != year)
model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
## extract coefficients
coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
coefs$coefficient <- dimnames(coeftable(model))[[1]]
coefs$type <- "year"
coef_jack[[year]] <- coefs %>%
filter(coefficient == interaction_term_dict)
# Debug: Print coefficients for each country to check results
# print(coef_jack[[year]])
}
## do this for half-decade
# for (hc in unique(dataset$half_decade)) {
#   data_jacknife <- dataset %>% filter(time_period != hc)
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "half_decade"
#
#   coef_jack[[hc]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   # print(coef_jack[[hc]])
# }
## jacknife estimate for observations (takes too long)
# for(row_no in 1:nrow(dataset)) {
#   data_jacknife <- dataset[-row_no,]
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "observation"
#
#   coef_jack[[row_no]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   print(coef_jack[[row_no]])
# }
## bind together the results
coef_jack <- bind_rows(coef_jack)
# print(coef_jack)
## plot histograms
print(coef_jack %>%
ggplot(aes(x = estimate)) +
geom_histogram(aes(y = after_stat(density)),
alpha = 0.8,
colour = "white") +
geom_density(linewidth = 0.8) +
geom_vline(xintercept = 0, linetype = "dashed", color = "red",
linewidth = 1) +
geom_vline(aes(xintercept = mean(estimate)), linetype = "dashed",
color = "darkblue", linewidth = 1) +
expand_limits(x = 0) +
# facet_wrap(~type) +
# labelling doesn't work (need to modify dictionary in loop above)
labs(title = paste0("Jacknife estimates for ", var_dict[interaction_term_dict]),
x = "Estimate",
y = "Density") +
theme_bw())
## save plots
ggsave(paste0(here(), "06 Figures and Tables/Figures/Jacknife/", var_dict[interaction_term_dict], ".png"),
plot = last_plot(),
width = 9, height = 6, dpi = 300)
}
}
return(models_list)
}
jacknife_function <- function(dataset, data_type, var_dict, corporatism, variables, covariates) {
# Check for necessary columns and types
necessary_columns <- c("iso3c", "clim_act_pol", "time_period")
if (!all(necessary_columns %in% names(dataset))) {
stop("Dataset must contain the necessary columns: iso3c, clim_act_pol, and time_period.")
}
# Data modification based on 'data_type'
if (grepl("adoption", data_type)) {
dataset <- dataset %>%
mutate(obs_value1 = ifelse(obs_value1 > 0, 1, 0))
}
# Create lagged variables for specified columns
all_vars <- unique(c(corporatism, variables, covariates))
dataset <- dataset %>%
group_by(iso3c, clim_act_pol) %>%
mutate(across(
.cols = all_vars,
.fns = ~dplyr::lag(.x, 1, order_by = time_period),
.names = "{.col}_lag1"
)) %>%
ungroup()
# Update var_dict with new lagged variables
# Update var_dict with new lagged variables
for (col in all_vars) {
new_var_name <- paste0(col, "_lag1")
var_dict[new_var_name] <- paste0(var_dict[col], ", 1-year lag")
}
# Prepare the list to store models
models_list <- list()
# Iterate through each pair of corporatism and variables
for(j in corporatism) {
for(i in variables) {
# Create interaction term and update dictionary
interaction_term <- paste(paste0(j, "_lag1"), paste0(i, "_lag1"), sep = "*")
interaction_term_dict <- paste(paste0(j, "_lag1"), paste0(i, "_lag1"), sep = ":")
var_dict[interaction_term_dict] <- paste0(var_dict[paste0(j, "_lag1")], " x ", var_dict[paste0(i, "_lag1")])
# Formula construction
if (grepl("LEV2", data_type)) {
formula <- as.formula(paste("obs_value1 ~", interaction_term, "+", paste(paste0(covariates, "_lag1"), collapse = " + "), "| iso3c + half_decade + instrument_type"))
} else {
formula <- as.formula(paste("obs_value1 ~", interaction_term, "+", paste(paste0(covariates, "_lag1"), collapse = " + "), "| iso3c + half_decade + clim_act_pol"))
}
# Debug: Print the formula to ensure it is constructed correctly
print(interaction_term_dict)
print(formula)
# # Perform jackknife estimation
coef_jack <- list()
# for (country in unique(dataset$iso3c)) {
#   data_jacknife <- dataset %>% filter(iso3c != country)
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "country"
#
#   coef_jack[[country]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   print(coef_jack[[country]])
# }
#
# jacknife estimatation for year
for (year in unique(dataset$time_period)) {
data_jacknife <- dataset %>% filter(time_period != year)
model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
## extract coefficients
coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
coefs$coefficient <- dimnames(coeftable(model))[[1]]
coefs$type <- "year"
coef_jack[[year]] <- coefs %>%
filter(coefficient == interaction_term_dict)
# Debug: Print coefficients for each country to check results
# print(coef_jack[[year]])
}
## do this for half-decade
# for (hc in unique(dataset$half_decade)) {
#   data_jacknife <- dataset %>% filter(time_period != hc)
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "half_decade"
#
#   coef_jack[[hc]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   # print(coef_jack[[hc]])
# }
## jacknife estimate for observations (takes too long)
# for(row_no in 1:nrow(dataset)) {
#   data_jacknife <- dataset[-row_no,]
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "observation"
#
#   coef_jack[[row_no]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   print(coef_jack[[row_no]])
# }
## bind together the results
coef_jack <- bind_rows(coef_jack)
# print(coef_jack)
## plot histograms
print(coef_jack %>%
ggplot(aes(x = estimate)) +
geom_histogram(aes(y = after_stat(density)),
alpha = 0.8,
colour = "white") +
geom_density(linewidth = 0.8) +
geom_vline(xintercept = 0, linetype = "dashed", color = "red",
linewidth = 1) +
geom_vline(aes(xintercept = mean(estimate)), linetype = "dashed",
color = "darkblue", linewidth = 1) +
expand_limits(x = 0) +
# facet_wrap(~type) +
# labelling doesn't work (need to modify dictionary in loop above)
labs(title = paste0("Jacknife estimates for ", var_dict[interaction_term_dict]),
x = "Estimate",
y = "Density") +
theme_bw())
## save plots
ggsave(paste0(here(), "06 Figures and Tables/Figures/Jacknife/", data_type, var_dict[interaction_term_dict], ".png"),
plot = last_plot(),
width = 9, height = 6, dpi = 300)
}
}
return(models_list)
}
jacknife_function(dataset = oecd_stringency_LEV1,
data_type = "stringency_LEV1",
var_dict = var_dict,
corporatism = corporatism,
variables = variables,
covariates = covariates)
jacknife_function <- function(dataset, data_type, var_dict, corporatism, variables, covariates) {
# Check for necessary columns and types
necessary_columns <- c("iso3c", "clim_act_pol", "time_period")
if (!all(necessary_columns %in% names(dataset))) {
stop("Dataset must contain the necessary columns: iso3c, clim_act_pol, and time_period.")
}
# Data modification based on 'data_type'
if (grepl("adoption", data_type)) {
dataset <- dataset %>%
mutate(obs_value1 = ifelse(obs_value1 > 0, 1, 0))
}
# Create lagged variables for specified columns
all_vars <- unique(c(corporatism, variables, covariates))
dataset <- dataset %>%
group_by(iso3c, clim_act_pol) %>%
mutate(across(
.cols = all_vars,
.fns = ~dplyr::lag(.x, 1, order_by = time_period),
.names = "{.col}_lag1"
)) %>%
ungroup()
# Update var_dict with new lagged variables
# Update var_dict with new lagged variables
for (col in all_vars) {
new_var_name <- paste0(col, "_lag1")
var_dict[new_var_name] <- paste0(var_dict[col], ", 1-year lag")
}
# Prepare the list to store models
models_list <- list()
# Iterate through each pair of corporatism and variables
for(j in corporatism) {
for(i in variables) {
# Create interaction term and update dictionary
interaction_term <- paste(paste0(j, "_lag1"), paste0(i, "_lag1"), sep = "*")
interaction_term_dict <- paste(paste0(j, "_lag1"), paste0(i, "_lag1"), sep = ":")
var_dict[interaction_term_dict] <- paste0(var_dict[paste0(j, "_lag1")], " x ", var_dict[paste0(i, "_lag1")])
# Formula construction
if (grepl("LEV2", data_type)) {
formula <- as.formula(paste("obs_value1 ~", interaction_term, "+", paste(paste0(covariates, "_lag1"), collapse = " + "), "| iso3c + half_decade + instrument_type"))
} else {
formula <- as.formula(paste("obs_value1 ~", interaction_term, "+", paste(paste0(covariates, "_lag1"), collapse = " + "), "| iso3c + half_decade + clim_act_pol"))
}
# Debug: Print the formula to ensure it is constructed correctly
print(interaction_term_dict)
print(formula)
# # Perform jackknife estimation
coef_jack <- list()
# for (country in unique(dataset$iso3c)) {
#   data_jacknife <- dataset %>% filter(iso3c != country)
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "country"
#
#   coef_jack[[country]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   print(coef_jack[[country]])
# }
#
# jacknife estimatation for year
for (year in unique(dataset$time_period)) {
data_jacknife <- dataset %>% filter(time_period != year)
model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
## extract coefficients
coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
coefs$coefficient <- dimnames(coeftable(model))[[1]]
coefs$type <- "year"
coef_jack[[year]] <- coefs %>%
filter(coefficient == interaction_term_dict)
# Debug: Print coefficients for each country to check results
# print(coef_jack[[year]])
}
## do this for half-decade
# for (hc in unique(dataset$half_decade)) {
#   data_jacknife <- dataset %>% filter(time_period != hc)
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "half_decade"
#
#   coef_jack[[hc]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   # print(coef_jack[[hc]])
# }
## jacknife estimate for observations (takes too long)
# for(row_no in 1:nrow(dataset)) {
#   data_jacknife <- dataset[-row_no,]
#   model <- feols(formula, data = data_jacknife, vcov = ~iso3c)
#   ## extract coefficients
#   coefs <- coeftable(model) %>% clean_names() %>% as_tibble()
#   coefs$coefficient <- dimnames(coeftable(model))[[1]]
#   coefs$type <- "observation"
#
#   coef_jack[[row_no]] <- coefs %>%
#     filter(coefficient == interaction_term_dict)
#
#   # Debug: Print coefficients for each country to check results
#   print(coef_jack[[row_no]])
# }
## bind together the results
coef_jack <- bind_rows(coef_jack)
# print(coef_jack)
## plot histograms
print(coef_jack %>%
ggplot(aes(x = estimate)) +
geom_histogram(aes(y = after_stat(density)),
alpha = 0.8,
colour = "white") +
geom_density(linewidth = 0.8) +
geom_vline(xintercept = 0, linetype = "dashed", color = "red",
linewidth = 1) +
geom_vline(aes(xintercept = mean(estimate)), linetype = "dashed",
color = "darkblue", linewidth = 1) +
expand_limits(x = 0) +
# facet_wrap(~type) +
# labelling doesn't work (need to modify dictionary in loop above)
labs(title = paste0("Jacknife estimates for ", var_dict[interaction_term_dict]),
x = "Estimate",
y = "Density") +
theme_bw())
## save plots
ggsave(paste0(here(), "/06 Figures and Tables/Figures/Jacknife/", data_type, var_dict[interaction_term_dict], ".png"),
plot = last_plot(),
width = 9, height = 6, dpi = 300)
}
}
return(models_list)
}
jacknife_function(dataset = oecd_stringency_LEV1,
data_type = "stringency_LEV1",
var_dict = var_dict,
corporatism = corporatism,
variables = variables,
covariates = covariates)
