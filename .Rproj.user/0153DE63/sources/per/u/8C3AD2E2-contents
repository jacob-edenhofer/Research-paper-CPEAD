

################################
# Preliminaries
################################

# Load packages 
## Install pacman if it is not already installed
if (!require("pacman")) install.packages("pacman")

# Use pacman to load and install the required packages
pacman::p_load(
  tidyverse,
  data.table,
  fs,
  sf,
  tidylog,
  rvest, 
  WDI,
  httr,
  R.utils,
  readxl,
  labelled,
  manifestoR,
  fixest, 
  marginaleffects,
  openxlsx,
  lubridate,
  here,
  parallel,
  modelsummary,
  countrycode,
  tinytable,
  janitor,
  purrr,
  tools,
  eurostat,
  rnaturalearth, 
  rnaturalearthdata,
  arrow,
  haven,
  vdemdata,
  patchwork,
  logger
)


## create file path 
cpead_files <- list.files(file.path(here::here(), "01 Raw data", "Controls and other"), recursive = T, full.names = T) 


# Function to import data from various file types
import_data <- function(file_path, verbose = FALSE) {
  # Skip files with extensions that aren't data files
  if (grepl("\\.(R|docx|pdf|txt)$", file_path, ignore.case = TRUE)) {
    if (verbose) log_info("Skipping non-data file: {file_path}")
    return(NULL)
  }
  
  # Extract the file extension
  ext <- tools::file_ext(file_path)
  
  # Initialise data as NULL
  data <- NULL
  
  # Use tryCatch to handle errors 
  tryCatch({
    # Switch based on file extension
    data <- switch(tolower(ext),
                   "csv" = {
                     if (verbose) log_info("Attempting to read CSV file: {file_path}")
                     data <- data.table::fread(file_path, showProgress = FALSE)
                     as_tibble(data)
                   },
                   "xlsx" = {
                     if (verbose) log_info("Attempting to read XLSX file: {file_path}")
                     sheet_names <- readxl::excel_sheets(file_path)
                     data <- lapply(sheet_names, function(sheet) {
                       sheet_data <- readxl::read_xlsx(file_path, sheet = sheet)
                       janitor::clean_names(sheet_data)
                     })
                     names(data) <- sheet_names
                     data
                   },
                   "xls" = {
                     if (verbose) log_info("Attempting to read XLS file: {file_path}")
                     sheet_names <- readxl::excel_sheets(file_path)
                     data <- lapply(sheet_names, function(sheet) {
                       sheet_data <- readxl::read_xls(file_path, sheet = sheet)
                       janitor::clean_names(sheet_data)
                     })
                     names(data) <- sheet_names
                     data
                   },
                   "json" = {
                     if (verbose) log_info("Attempting to read JSON file: {file_path}")
                     data <- jsonlite::fromJSON(file_path)
                     as_tibble(data)
                   },
                   "xml" = {
                     if (verbose) log_info("Attempting to read XML file: {file_path}")
                     xml_data <- xml2::read_xml(file_path)
                     data <- xml2::as_list(xml_data)
                     as_tibble(data)
                   },
                   "rds" = {
                     if (verbose) log_info("Attempting to read RDS file: {file_path}")
                     readRDS(file_path)
                   },
                   "rdata" = {
                     if (verbose) log_info(paste("Attempting to read RData file:", file_path))
                     env <- new.env()
                     load(file_path, envir = env)
                     objects_list <- as.list(env)
                     if (length(objects_list) == 1) {
                       return(objects_list[[1]])  # Return the single object directly
                     } else {
                       return(objects_list)  # Return a named list of all objects
                     }
                     
                     # If there's only one object, return it directly
                     if (length(objects_list) == 1) {
                       return(objects_list[[1]])
                     } else {
                       return(objects_list)  # Return a named list of objects
                     }
                   },
                   "dta" = {
                     if (verbose) log_info("Attempting to read DTA file: {file_path}")
                     haven::read_dta(file_path)
                   },
                   "sav" = {
                     if (verbose) log_info("Attempting to read SAV file: {file_path}")
                     haven::read_sav(file_path)
                   },
                   "sas7bdat" = {
                     if (verbose) log_info("Attempting to read SAS file: {file_path}")
                     haven::read_sas(file_path)
                   },
                   "feather" = {
                     if (verbose) log_info("Attempting to read Feather file: {file_path}")
                     arrow::read_feather(file_path)
                   },
                   "parquet" = {
                     if (verbose) log_info("Attempting to read Parquet file: {file_path}")
                     arrow::read_parquet(file_path)
                   },
                   "gpkg" = {
                     if (verbose) log_info(paste("Attempting to read GeoPackage file:", file_path))
                     sf::st_read(file_path, quiet = !verbose)
                   },
                   {
                     if (verbose) log_warn("Unsupported file type for: {file_path}")
                     NULL
                   }
    )
    
    # Clean column names if data was successfully read
    if (!is.null(data)) {
      data <- janitor::clean_names(data)
    }
    
    return(data)
  }, error = function(e) {
    log_error("Error reading file {basename(file_path)}: {e$message}")
    return(NULL)
  })
}


data_list <-  setNames(
  map(cpead_files, import_data), 
  nm = tools::file_path_sans_ext(basename(cpead_files))
)

## use gallup 
gallup_enviorn <- data_list[["GallupAnalytics_Export_20240515_104000"]][["preserve_the_environment"]]

## clean 
gallup_enviorn_clean <- gallup_enviorn %>%
  slice(-c(1:7)) 

## create name vector 
col_names <- gallup_enviorn %>% slice(7) %>% unlist() %>% as.character() 
names(gallup_enviorn_clean) <- col_names
gallup_enviorn_clean <- clean_names(gallup_enviorn_clean)

## turn numeric 
gallup_enviorn_clean <- gallup_enviorn_clean %>%
  mutate(time = as.numeric(as.character(time)), 
         satisfied = as.numeric(as.character(satisfied)),
         dissatisfied = as.numeric(as.character(dissatisfied)),
         dk_rf = as.numeric(as.character(dk_rf)),
         n_size = as.numeric(as.character(n_size)),
         iso3c = countrycode(geography, origin = "country.name", destination = "iso3c"),
         diff = dissatisfied - satisfied
         )

## merge in world geometry 
# rnaturalearth::ne_countries(scale = "medium", returnclass = "sf") -> world
world <- ne_countries(type = "countries", scale = "small", returnclass = "sf")

## create year variable from 20006 to 2023 and repeat the world data
years <- seq(2006, 2023, 1)

world_map_ext <- bind_rows(lapply(years, function(year){
  world %>%
    mutate(year = year)
}))

## join
gallup_enviorn_clean_map <- gallup_enviorn_clean %>%
  right_join(world_map_ext, by = c("iso3c" = "iso_a3", "time" = "year"))

## plot 
gallup_enviorn_clean_map %>%
  # filter(!is.na(diff)) %>%
  filter(time %in% c("2006", "2011", "2016", "2021")) %>%
  ggplot(aes(geometry = geometry)) +
  geom_sf(aes(fill = diff)) +
  facet_wrap(~time) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
                       breaks = seq(-0.45, 0.45, 0.15),
                       labels = scales::label_percent(scale = 100),
                       name = "") +
  labs(title = "Difference (dissatisfied - satisfied)", 
       subtitle = "Are you (dis)satisfied with efforts to preserve the environment?", 
       caption = "Data: Gallup World Poll",
       fill = "Difference (dissatisfied - satisfied)") +
  theme_minimal() +
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5), 
        plot.subtitle = element_text(hjust = 0.5)) +
  # tinker with height and width of colour bar 
  guides(fill = guide_colorbar(barwidth = 15, barheight = 1)) 


## create long version 
gallup_enviorn_clean_long <- gallup_enviorn_clean %>%
  pivot_longer(cols = c("satisfied", "dissatisfied", "dk_rf", "diff"), 
               names_to = "response", values_to = "value") 

## reverse join 
world_gallup <- world %>%
  dplyr::inner_join(gallup_enviorn_clean_long, by = c("iso_a3" = "iso3c"))


world_gallup %>%
  filter(grepl("diff", response)) %>% 
  # select(response, value, time, geometry, name_long) %>% View()
  ggplot(aes(geometry = geometry)) +
  geom_sf(aes(fill = value)) +
  facet_wrap(~time) +
  ggthemes::theme_map() +
  theme(legend.position = "bottom")


